{"version":3,"sources":["components/BillionairesProfileComponent.js","utils/AxiosUtil.js","App.js","serviceWorker.js","index.js"],"names":["BillionairesProfileComponent","useState","profiles","setProfiles","useEffect","url","axios","get","headers","then","result","data","catch","error","console","map","perfil","index","key","className","src","photo","alt","name","Product","type","App","role","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSAeeA,EAZsB,WAAO,IAAD,EACPC,mBAAS,IADF,mBAChCC,EADgC,KACtBC,EADsB,KAQvC,OALAC,qBAAU,WCFK,IAACC,KDGR,oDCHgBC,IAAMC,IAAIF,EAAK,CAACG,QAAS,CAAC,aAFrC,mEDMJC,MAAK,SAAAC,GAAYP,EAAYO,EAAOC,SAAQC,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,QAC/E,IAEK,6BAAMX,EAASa,KAAI,SAACC,EAAQC,GAC/B,OAAO,yBAAKC,IAAKD,EAAOE,UAAU,2BAA2BC,IAAKJ,EAAOK,MAAOC,IAAKN,EAAOO,YEPrG,SAASC,IACL,OACI,yBAAKL,UAAU,uBACX,yBAAKA,UAAU,aACX,yBAAKC,IAAI,6CAA6CD,UAAU,eAAeG,IAAI,YACnF,uBAAGH,UAAU,cACb,yBAAKA,UAAU,qDACX,yBAAKA,UAAU,aACX,4BAAQM,KAAK,SAASN,UAAU,oCAAhC,WACA,4BAAQM,KAAK,SAASN,UAAU,oCAAhC,cAkDTO,MA1Cf,WACG,OACK,yBAAKP,UAAU,OACX,0BAAMQ,KAAK,QACP,6BAASR,UAAU,yBACf,yBAAKA,UAAU,aACX,wBAAIA,UAAU,qBAAd,kBAEA,kBAAC,EAAD,MAEA,uBAAGA,UAAU,mBAAb,qCACA,2BACI,uBAAGS,KAAK,IAAIT,UAAU,wBAAtB,aAIZ,yBAAKA,UAAU,sBAAsBQ,KAAK,SAA1C,2BAGA,yBAAKR,UAAU,uBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,kBAACK,EAAD,WAOpB,4BAAQL,UAAU,cACd,yBAAKA,UAAU,aACX,uBAAGA,UAAU,eACT,uBAAGS,KAAK,KAAR,gBAEJ,sHC7CAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.ceb8b70c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {get} from \"../utils/AxiosUtil\";\n\nconst BillionairesProfileComponent = () => {\n    const [profiles, setProfiles] = useState([]);\n    \n    useEffect(() => {\n        get( `https://api.jsonbin.io/b/5dcb25a3f05d9041253a89c0`)\n            .then(result => { setProfiles(result.data)}).catch(error => console.error(error));\n    }, []);\n    \n    return (<div>{profiles.map((perfil, index) => \n        {return <img key={index} className=\"App-imgBilionariosPerfil\" src={perfil.photo} alt={perfil.name}/>})}</div>)\n};\n\nexport default BillionairesProfileComponent;\n","import axios from 'axios';\n\nconst secreKey = \"$2b$10$kAOQB3Xlwn3iY08.nYZfcO3E2lMbELVxXx2lxpTvVeP4KKZCEI7oq\";\n\nexport const get = (url) => axios.get(url, {headers: {\"secret-key\": secreKey}});","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport BillionairesProfileComponent from \"./components/BillionairesProfileComponent\";\n\nfunction Product() {\n    return (\n        <div className=\"card mb-4 shadow-sm\">\n            <div className=\"card-body\">\n                <img src=\"https://neal.fun/spend/minified/bigmac.jpg\" className=\"card-img-top\" alt=\"Burguer\" />\n                <p className=\"card-text\"></p>\n                <div className=\"d-flex justify-content-between align-items-center\">\n                    <div className=\"btn-group\">\n                        <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\">Comprar</button>\n                        <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\">Vender</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nfunction App() {\n   return (\n        <div className=\"App\">\n            <main role=\"main\">\n                <section className=\"jumbotron text-center\">\n                    <div className=\"container\">\n                        <h1 className=\"jumbotron-heading\">Bilion√°rios</h1>\n\n                        <BillionairesProfileComponent />\n                        \n                        <p className=\"lead text-muted\">Esse cara tem mto $$. Mas quanto?</p>\n                        <p>\n                            <a href=\"#\" className=\"btn btn-primary my-2\">Trocar</a>\n                        </p>\n                    </div>\n                </section>\n                <div className=\"alert alert-success\" role=\"alert\">\n                    R$ 90,000,000,000 saldo\n                </div>\n                <div className=\"album py-5 bg-light\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-4\">\n                                <Product />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </main>\n\n            <footer className=\"text-muted\">\n                <div className=\"container\">\n                    <p className=\"float-right\">\n                        <a href=\"#\">Back to top</a>\n                    </p>\n                    <p>Album example is &copy; Bootstrap, but please download and customize it for yourself!</p>\n                </div>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}