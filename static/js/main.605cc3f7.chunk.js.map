{"version":3,"sources":["utils/AxiosUtil.js","components/BillionairesProfile.js","App.js","serviceWorker.js","index.js"],"names":["get","url","axios","headers","BillionairesProfile","person","name","description","photo","className","formatter","Intl","NumberFormat","style","currency","Product","src","alt","type","Carousel","list","onChangePerson","maxIndex","length","useState","activeItemIndex","setActiveItemIndex","infiniteLoop","gutter","activePosition","chevronWidth","disableSwipe","alwaysShowChevrons","numberOfCards","slidesToScroll","outsideChevron","showSlither","firstAndLastGutter","requestToChangeActive","index","currentIndex","console","log","find","i","rightChevron","leftChevron","map","key","onClick","App","loading","setLoading","setList","setPerson","balance","setBalance","products","setProducts","useEffect","then","data","catch","error","fortune","role","value","format","formatMoney","product","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.605cc3f7.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst secreKey = \"$2b$10$kAOQB3Xlwn3iY08.nYZfcO3E2lMbELVxXx2lxpTvVeP4KKZCEI7oq\";\n\nexport const get = (url) => axios.get(url, {headers: {\"secret-key\": secreKey}});","import React from 'react';\n\nconst BillionairesProfile = ({ person: { name, photo, description } }) => (\n    <div>\n        <p className=\"lead text-muted\">Name: {name}</p>\n        <p className=\"lead text-muted\">{description}</p>\n    </div>\n);\n\nexport default BillionairesProfile;\n","import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { get } from \"./utils/AxiosUtil\";\nimport BillionairesProfile from \"./components/BillionairesProfile\";\nimport ItemsCarousel from 'react-items-carousel';\n\nconst formatter = new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL',\n});\n\nconst Product = ({url}) => {\n    return (\n        <div className=\"col-md-4\">\n            <div className=\"card mb-4 shadow-sm\">\n                <div className=\"card-body\">\n                    <img src={url} className=\"card-img-top\" alt=\"Burger\" />\n                    <p className=\"card-text\" />\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                        <div className=\"btn-group\">\n                            <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\">Comprar</button>\n                            <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\">Vender</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nfunction formatMoney(value = 0) {\n    return formatter.format(value);\n}\n\nconst Carousel = ({person, list, onChangePerson}) => {\n    const maxIndex = list.length;\n    const [activeItemIndex, setActiveItemIndex] = useState(1);\n\n    return (\n        <ItemsCarousel\n        infiniteLoop={true}\n        gutter={12}\n        activePosition={'center'}\n        chevronWidth={30}\n        disableSwipe={false}\n        alwaysShowChevrons={false}\n        numberOfCards={4}\n        slidesToScroll={1}\n        outsideChevron={true}\n        showSlither={false}\n        firstAndLastGutter={false}\n        activeItemIndex={activeItemIndex}\n        requestToChangeActive={index => {\n            const currentIndex = index >= maxIndex ? 0 : index;\n            console.log(currentIndex);\n            console.log(maxIndex);\n            setActiveItemIndex(currentIndex);\n            onChangePerson(list.find((person, i) => i === currentIndex));    \n           }\n         }\n        rightChevron={'>'}\n        leftChevron={'<'}>\n        {list.map((person, index) => {\n                return <div>\n                    <img key={index}\n                         className=\"App-imgBilionariosPerfil\"\n                         alt={person.name}\n                         src={person.photo}\n                         onClick={() => onChangePerson(person)}/>\n                </div>\n            }\n        )}\n    </ItemsCarousel>\n    )\n};\n\nconst App = () => {\n    const [loading, setLoading] = useState(true);\n    const [list, setList] = useState([]);\n    const [person, setPerson] = useState({});\n    const [balance, setBalance] = useState(0);\n    const [products, setProducts] = useState([]);\n\n    useEffect(() => {\n        get('https://api.jsonbin.io/b/5dcb25a3f05d9041253a89c0/latest').then(({ data }) => {\n            const [person] = data;\n            setList(data);\n            onChangePerson(person);\n            setLoading(false);\n        }).catch(error => console.error(error));\n    }, []);\n    \n    useEffect(() => {\n        get('https://api.jsonbin.io/b/5dcae832c1f85104e53cd9e7/latest').then(({ data }) => {\n            setProducts(data);\n        }).catch(error => console.error(error));\n        \n    },[]);\n\n    const onChangePerson = (person) => {\n        setPerson(person);\n        setBalance(person.fortune);\n    };\n    \n    return !loading ? (\n        <div className=\"App\">\n            <main role=\"main\">\n                <section className=\"text-center\">\n                    <div className=\"container\">\n                        <h1 className=\"jumbotron-heading\">Bilion√°rios</h1>\n                        <div style={{\"padding\":\"0 60px\",\"maxWidth\":800,\"margin\":\"0 auto\"}}>\n                           <Carousel person={person} list={list} onChangePerson={onChangePerson}/>\n                        </div>\n                        <BillionairesProfile person={person}/>\n                    </div>\n                </section>\n                <div className=\"alert alert-success\" role=\"alert\">\n                    {formatMoney(balance)}\n                </div>\n                <div className=\"album py-5 bg-light\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            {products.map(product => {return <Product url={product.photo}/>})}\n                        </div>\n                    </div>\n                </div>\n            </main>\n        </div>\n    ) : <h1>Loading...</h1>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}